---
import type { Session } from "@auth/core/types";

import { Header } from "@/sections/Header";
import type { UserProps } from "@/interfaces/User";

interface Props {
  title: string;
  user: UserProps | null;
}

const { title, user } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Bittyurl" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <div class="flex min-h-screen w-full flex-col bg-white dark:bg-black text-gray-900 dark:text-gray-50">
      <Header client:load user={user} />
      <main class="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <slot />
      </main>
    </div>
  </body>
</html>
<style is:global>
  @import "@/styles/globals.css";

  html,
  body {
    font-family: system-ui, sans-serif;
  }

  html {
    box-sizing: border-box;
  }

  *,
  *:before,
  *:after {
    box-sizing: inherit;
  }
</style>
<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
